package clock

import (
    "testing"
    "clock"
)

var testInput = []struct {
    balls int
    haltAt int
    expected string
} {
    // Assignment test cases
    {30, -1, "30 balls cycle after 15 days."},
    {45, -1, "45 balls cycle after 378 days."},
    {30, 325, "{\"Min\":[],\"FiveMin\":[22,13,25,3,7],\"Hour\":[6,12,17,4,15],\"Main\":[11,5,26,18,2,30,19,8,24,10,29,20,16,21,28,1,23,14,27,9]}"},

    //Input validation test cases (edge cases)
    {26, -1, "Invalid number of balls : 26"},
    {27, -1, "27 balls cycle after 23 days."},
    {127, -1, "127 balls cycle after 2415 days."},
    {128, -1, "Invalid number of balls : 128"},

    //Additional random cases
    {28, -1, "28 balls cycle after 76 days."},
    {29, -1, "29 balls cycle after 102 days."},
    {40, -1, "40 balls cycle after 37 days."},
    {42, -1, "42 balls cycle after 114 days."},
    {58, -1, "58 balls cycle after 559 days."},
    {87, -1, "87 balls cycle after 570 days."},
    {99, -1, "99 balls cycle after 6630 days."},
    {101, -1, "101 balls cycle after 861 days."},
    {115, -1, "115 balls cycle after 5762 days."},
    {28, 100, "{\"Min\":[],\"FiveMin\":[4,8,12,11,15,17,21,24],\"Hour\":[6],\"Main\":[28,1,2,20,25,3,7,18,19,5,10,22,23,9,16,26,27,14,13]}"},
    {29, 100, "{\"Min\":[],\"FiveMin\":[11,9,13,16,20,18,22,26],\"Hour\":[6],\"Main\":[29,1,2,3,25,4,8,12,19,5,10,15,23,24,7,17,27,28,14,21]}"},
    {40, 100, "{\"Min\":[],\"FiveMin\":[34,38,3,8,22,13,25,26],\"Hour\":[21],\"Main\":[27,28,29,39,31,32,33,2,1,36,37,7,6,14,4,12,11,19,18,17,16,24,23,30,35,40,9,5,10,15,20]}"},
    {42, 100, "{\"Min\":[],\"FiveMin\":[27,31,3,8,13,18,35,10],\"Hour\":[23],\"Main\":[5,28,29,21,22,32,33,34,26,36,37,38,39,7,41,42,4,12,11,1,9,17,16,24,14,40,2,6,19,15,20,25,30]}"},
    {58, 100, "{\"Min\":[],\"FiveMin\":[7,11,24,28,32,36,49,53],\"Hour\":[3],\"Main\":[52,51,4,58,57,56,55,50,45,40,35,30,25,20,15,10,5,8,9,1,2,12,13,14,6,16,17,18,19,29,21,22,23,33,34,26,27,37,38,39,31,41,42,43,44,54,46,47,48]}"},
    {87, 100, "{\"Min\":[],\"FiveMin\":[65,70,75,80,85,2,6,19],\"Hour\":[60],\"Main\":[18,17,16,24,23,22,21,29,28,27,26,34,33,32,31,39,38,37,36,44,43,42,41,49,48,47,46,54,53,52,51,59,58,57,56,55,50,45,40,35,30,25,20,15,10,5,64,63,62,61,69,68,67,66,74,73,72,71,79,78,77,76,84,83,82,81,3,4,87,86,7,8,9,1,11,12,13,14]}"},
    {99, 100, "{\"Min\":[],\"FiveMin\":[65,70,75,80,85,90,95,4],\"Hour\":[60],\"Main\":[3,2,1,9,8,7,6,14,13,12,11,19,18,17,16,24,23,22,21,29,28,27,26,34,33,32,31,39,38,37,36,44,43,42,41,49,48,47,46,54,53,52,51,59,58,57,56,55,50,45,40,35,30,25,20,15,10,5,64,63,62,61,69,68,67,66,74,73,72,71,79,78,77,76,84,83,82,81,89,88,87,86,94,93,92,91,99,98,97,96]}"},
    {101, 100, "{\"Min\":[],\"FiveMin\":[65,70,75,80,85,90,95,100],\"Hour\":[60],\"Main\":[101,4,3,2,1,9,8,7,6,14,13,12,11,19,18,17,16,24,23,22,21,29,28,27,26,34,33,32,31,39,38,37,36,44,43,42,41,49,48,47,46,54,53,52,51,59,58,57,56,55,50,45,40,35,30,25,20,15,10,5,64,63,62,61,69,68,67,66,74,73,72,71,79,78,77,76,84,83,82,81,89,88,87,86,94,93,92,91,99,98,97,96]}"},
    {115, 100, "{\"Min\":[],\"FiveMin\":[65,70,75,80,85,90,95,100],\"Hour\":[60],\"Main\":[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,4,3,2,1,9,8,7,6,14,13,12,11,19,18,17,16,24,23,22,21,29,28,27,26,34,33,32,31,39,38,37,36,44,43,42,41,49,48,47,46,54,53,52,51,59,58,57,56,55,50,45,40,35,30,25,20,15,10,5,64,63,62,61,69,68,67,66,74,73,72,71,79,78,77,76,84,83,82,81,89,88,87,86,94,93,92,91,99,98,97,96]}"},
}

func TestRun(t *testing.T) {

    for _, input := range testInput {
        var ballClock clock.BallClock
        clock.NewClock(input.balls, &ballClock)
        output := clock.RunClock(input.haltAt, &ballClock)

        if output != input.expected {
            t.Errorf("Found[%s] Expected[%s] ", output, input.expected)
        }
    }
}


